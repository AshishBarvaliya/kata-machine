type Node<T> = {
    value: T;
    next?: Node<T>;
};

export default class SinglyLinkedList<T> {
    public length: number;
    private head?: Node<T>;
    private tail?: Node<T>;

    constructor() {
        this.length = 0;
        this.head = this.tail = undefined;
    }

    debug() {
        console.log("------------------------------------------------------");

        let curr = this.head;
        for (let i = 0; i < this.length && curr; i++) {
            console.log(curr?.value + " -->" + curr?.next?.value);
            curr = curr.next;
        }
    }

    prepend(item: T): void {
        this.length++;
        if (!this.head) {
            this.head = this.tail = { value: item };
            this.debug();
            return;
        }

        let head = this.head;
        this.head = { value: item, next: head };
        this.debug();
    }

    insertAt(item: T, idx: number): void {
        if (!this.length) {
            this.append(item);
            this.debug();
            return;
        }
        let curr = this.head;
        for (let i = 0; i < idx && curr; i++) {
            curr = curr.next;
        }
        if (curr) {
            curr.next = { value: item, next: curr?.next?.next };
        }
        this.debug();
    }

    append(item: T): void {
        this.length++;
        let node = { value: item };
        if (!this.tail) {
            this.tail = this.head = node;
            return;
        }

        this.tail.next = node;
        this.tail = node;
        this.debug();
    }

    remove(item: T): T | undefined {
        let curr = this.head;
        let prev = this.head;
        let ind = 0;

        for (let i = 0; i < this.length && curr; i++) {
            if (curr?.value === item) {
                break;
            }
            prev = curr;
            curr = curr.next;
            ind++;
        }
        if (curr && prev) {
            let value = curr?.value;
            prev = curr?.next;
            this.length--;

            if (ind === 0) {
                this.head = curr?.next;
            }
            this.debug();
            return value;
        }
        return undefined;
    }

    get(idx: number): T | undefined {
        let curr = this.head;

        for (let i = 0; i < idx && curr; i++) {
            curr = curr.next;
        }

        this.debug();
        return curr?.value;
    }
    removeAt(idx: number): T | undefined {
        let curr = this.head;
        let prev = this.head;

        for (let i = 0; i < idx && curr; i++) {
            prev = curr;
            curr = curr.next;
        }

        if (curr && prev) {
            prev.next = curr?.next;

            if (idx === 0) {
                this.head = curr?.next;
            }

            this.debug();
            this.length--;
            return curr.value;
        }

        return undefined;
    }
}

